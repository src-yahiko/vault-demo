{{- if .Values.microServices.myapp -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  labels:
    service: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      service: myapp
  template:
    metadata:
      labels:
        service: myapp
    spec:
      volumes:
        - name: vault-integration-volume
          configMap:
            name: vault-integration-configmap
      containers:
        - name: myapp
          image: nginx
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              #!/bin/sh

              # If enabled, run the vault environment variable injection integration script
              [ $VAULT_ENABLE = "true" ] && cp /var/tmp/vault-integration.sh /tmp/ && chmod +x /tmp/vault-integration.sh && VAULT_PATH=myapp &&. ./tmp/vault-integration.sh
              wait

              # Create index.html using environment variables 
              TEMPLATE="<!DOCTYPE html><html><head><meta charset='UTF-8' /><title>$TEMPLATE_TITLE</title><style> body { color: $TEMPLATE_TEXT_COLOR; background-color: $TEMPLATE_BACKGROUND_COLOR; } </style></head><body><h1>$TEMPLATE_HEADER</h1><p>$TEMPLATE_CONTENT</p></body></html>"
              echo $TEMPLATE > /usr/share/nginx/html/index.html
              
              # Starting the main process
              nginx -g 'daemon off;'
          volumeMounts:
            - name: vault-integration-volume
              mountPath: /var/tmp
          env:
            - name: VAULT_ENABLE
              value: {{ .Values.myapp.VAULT_ENABLE | quote }}
            - name: TEMPLATE_TITLE
              value: {{ .Values.myapp.TEMPLATE_TITLE | quote }}
            - name: TEMPLATE_TEXT_COLOR
              value: {{ .Values.myapp.TEMPLATE_TEXT_COLOR | quote }}
            - name: TEMPLATE_BACKGROUND_COLOR
              value: {{ .Values.myapp.TEMPLATE_BACKGROUND_COLOR | quote }}
            - name: TEMPLATE_HEADER
              value: {{ .Values.myapp.TEMPLATE_HEADER | quote }}
            - name: TEMPLATE_CONTENT
              value: {{ .Values.myapp.TEMPLATE_CONTENT | quote }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                VAULT_PATH="myapp"
                VAULT_TOKEN="admin"
                VAULT_ADDRESS="http://$VAULT_SERVICE_HOST:$VAULT_SERVICE_PORT/v1/secret/data/$VAULT_PATH"
                VAULT_HEADER="X-Vault-Token: $VAULT_TOKEN"

                HTTP_STATUS_CODE=$(curl -s --location "$VAULT_ADDRESS" --header "X-Vault-Token: $VAULT_TOKEN" -o /dev/null -w "%{http_code}")
              
                if [ "$HTTP_STATUS_CODE" = "000" ]; then
                  echo "Service not found on given URL: $VAULT_ADDRESS"
                  exit 0
                elif [ "$HTTP_STATUS_CODE" = "404" ]; then
                  echo "Route not found on given URL: $VAULT_ADDRESS"
                  exit 0
                elif [ "$HTTP_STATUS_CODE" = "403" ]; then
                  echo "Incorrect token: $VAULT_TOKEN for $VAULT_ADDRESS"
                  exit 0
                else
                  echo "Status code: $HTTP_STATUS_CODE"
                  echo "$(curl -s -H "$VAULT_HEADER" "$VAULT_ADDRESS" | jq -r '.data.metadata.version')" > /tmp/liveness-version.txt
                  if cmp -s /tmp/version.txt /tmp/liveness-version.txt; then 
                    echo "Environment variable version $(cat /tmp/liveness-version.txt) is up to date"
                    exit 0
                  else
                    echo "New environment variable version $(cat /tmp/liveness-version.txt) detected"
                    exit 1
                  fi
                fi
            initialDelaySeconds: 10
            periodSeconds: 2
{{- end -}}